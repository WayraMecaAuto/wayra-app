// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  SUPER_USUARIO
  ADMIN_WAYRA_TALLER
  ADMIN_WAYRA_PRODUCTOS
  ADMIN_TORNI_REPUESTOS
  MECANICO
  VENDEDOR_WAYRA
  VENDEDOR_TORNI
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
}

enum TipoProducto {
  WAYRA_ENI
  WAYRA_CALAN
  TORNI_REPUESTO
  TORNILLERIA
}

enum EstadoOrden {
  PENDIENTE
  EN_PROCESO
  COMPLETADO
  CANCELADO
}

enum Moneda {
  USD
  COP
}

enum TipoPrecio {
  VENTA
  MINORISTA
  MAYORISTA
}

// Modelos principales
model User {
  id             String                 @id @default(cuid())
  email          String                 @unique
  name           String
  password       String
  role           UserRole               @default(MECANICO)
  isActive       Boolean                @default(true)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  lastLogin      DateTime?

  // Relaciones
  ordenes        OrdenServicio[]
  movimientos    MovimientoInventario[]
  notificaciones NotificacionUsuario[]
  movimientosContables MovimientoContable[]

  @@map("users")
}

model Producto {
  id                String        @id @default(cuid())
  codigo            String        @unique
  codigoBarras      String?       @unique
  nombre            String
  descripcion       String?
  tipo              TipoProducto
  categoria         String
  
  // Precios de compra
  precioCompra      Float
  monedaCompra      Moneda        @default(COP)
  
  // Precios calculados automÃ¡ticamente
  precioVenta       Float
  precioMinorista   Float
  precioMayorista   Float
  
  // ConfiguraciÃ³n de precios
  aplicaIva         Boolean       @default(false)
  porcentajeGanancia Float        @default(35)
  
  // Stock
  stock             Int           @default(0)
  stockMinimo       Int           @default(5)
  
  // Estado
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relaciones
  movimientos       MovimientoInventario[]
  detallesOrden     DetalleOrden[]
  detallesContables DetalleIngresoContable[] @relation("ProductoDetallesContables") // ðŸ‘ˆ Agregada

  @@map("productos")
}

model MovimientoInventario {
  id             String          @id @default(cuid())
  tipo           TipoMovimiento
  cantidad       Int
  motivo         String?
  precioUnitario Float?
  total          Float?
  fecha          DateTime        @default(now())
  
  // Relaciones
  producto       Producto        @relation(fields: [productoId], references: [id])
  productoId     String
  usuario        User            @relation(fields: [usuarioId], references: [id])
  usuarioId      String

  @@map("movimientos_inventario")
}

model OrdenServicio {
  id                    String        @id @default(cuid())
  numeroOrden           String        @unique
  clienteId             String
  vehiculoId            String
  descripcion           String
  estado                EstadoOrden   @default(PENDIENTE)
  fechaCreacion         DateTime      @default(now())
  fechaInicio           DateTime?
  fechaFin              DateTime?
  mes                   Int
  anio                  Int

  // Mano de obra
  manoDeObra            Float?        @default(0)

  // Totales
  subtotalServicios     Float         @default(0)
  subtotalProductos     Float         @default(0)
  subtotalRepuestosExternos Float     @default(0)
  iva                   Float         @default(0)
  total                 Float         @default(0)
  utilidad              Float         @default(0)

  // Relaciones
  cliente               Cliente       @relation(fields: [clienteId], references: [id])
  vehiculo              Vehiculo      @relation(fields: [vehiculoId], references: [id])
  mecanico              User          @relation(fields: [mecanicoId], references: [id])
  mecanicoId            String
  detalles              DetalleOrden[]
  servicios             ServicioOrden[]
  repuestosExternos     RepuestoExterno[]
  facturas              Factura[]

  @@map("ordenes_servicio")
}

model Cliente {
  id              String   @id @default(cuid())
  nombre          String
  telefono        String?
  email           String?
  direccion       String?
  tipoDocumento   String   @default("CC")
  numeroDocumento String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  vehiculos       Vehiculo[]
  ordenes         OrdenServicio[]
  facturas        Factura[]

  @@map("clientes")
}

model Vehiculo {
  id            String   @id @default(cuid())
  placa         String   @unique
  marca         String
  modelo        String
  anio          Int?
  color         String?
  vin           String?
  motor         String?
  combustible   String?
  kilometraje   Int?
  observaciones String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  cliente       Cliente  @relation(fields: [clienteId], references: [id])
  clienteId     String
  ordenes       OrdenServicio[]

  @@map("vehiculos")
}

model RepuestoExterno {
  id             String        @id @default(cuid())
  nombre         String
  descripcion    String?
  cantidad       Int
  precioCompra   Float
  precioVenta    Float
  precioUnitario Float
  subtotal       Float
  utilidad       Float         @default(0)
  proveedor      String?

  // Relaciones
  orden          OrdenServicio @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  ordenId        String

  @@map("repuestos_externos")
}

model Factura {
  id             String   @id @default(cuid())
  numeroFactura  String   @unique
  fecha          DateTime @default(now())
  vencimiento    DateTime?
  subtotal       Float
  iva            Float
  total          Float
  estado         String   @default("PENDIENTE")
  observaciones  String?
  
  // Relaciones
  cliente        Cliente  @relation(fields: [clienteId], references: [id])
  clienteId      String
  orden          OrdenServicio? @relation(fields: [ordenId], references: [id])
  ordenId        String?

  @@map("facturas")
}

model ServicioOrden {
  id          String        @id @default(cuid())
  descripcion String
  precio      Float
  aplicaIva   Boolean       @default(false)
  completado  Boolean       @default(false)

  aceiteId    String?
  filtroId    String?

  // Relaciones
  orden       OrdenServicio @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  ordenId     String

  @@map("servicios_orden")
}

model DetalleOrden {
  id             String        @id @default(cuid())
  cantidad       Int
  precioUnitario Float
  tipoPrecio     TipoPrecio    @default(VENTA)
  subtotal       Float
  
  // Relaciones
  orden          OrdenServicio @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  ordenId        String
  producto       Producto      @relation(fields: [productoId], references: [id])
  productoId     String

  @@map("detalles_orden")
}

model Configuracion {
  id          String   @id @default(cuid())
  clave       String   @unique
  valor       String
  descripcion String?
  updatedAt   DateTime @updatedAt

  @@map("configuracion")
}

model Notificacion {
  id          String   @id @default(cuid())
  titulo      String
  mensaje     String
  tipo        String
  categoria   String
  prioridad   String
  data        Json?
  createdAt   DateTime @default(now())
  
  // Relaciones
  usuarios    NotificacionUsuario[]
  
  @@map("notificaciones")
}

model NotificacionUsuario {
  id              String   @id @default(cuid())
  leida           Boolean  @default(false)
  fechaLeida      DateTime?
  
  // Relaciones
  notificacion    Notificacion @relation(fields: [notificacionId], references: [id], onDelete: Cascade)
  notificacionId  String
  usuario         User         @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId       String
  
  @@unique([notificacionId, usuarioId])
  @@map("notificaciones_usuarios")
}

enum TipoMovimientoContable {
  INGRESO
  EGRESO
}

enum ConceptoContable {
  VENTA_SERVICIO
  VENTA_PRODUCTO
  COMPRA_PRODUCTO
  GASTO_OPERATIVO
  GASTO_NOMINA
  OTRO
}

enum EntidadContable {
  WAYRA
  TORNIREPUESTOS
}

// ==================== MODELOS DE CONTABILIDAD ====================

model MovimientoContable {
  id                    String                    @id @default(cuid())
  tipo                  String
  concepto              String
  monto                 Float
  fecha                 DateTime                  @default(now())
  descripcion           String
  entidad               String
  referencia            String?
  mes                   Int                       @default(1)
  anio                  Int                       @default(2024)
  
  usuario               User                      @relation(fields: [usuarioId], references: [id])
  usuarioId             String
  
  detalleIngresos       DetalleIngresoContable[]
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  @@index([entidad])
  @@index([tipo])
  @@index([fecha])
  @@index([mes, anio])
  @@map("movimientos_contables")
}

model DetalleIngresoContable {
  id                    String                    @id @default(cuid())
  cantidad              Int
  precioCompra          Float
  precioVenta           Float
  subtotalCompra        Float
  subtotalVenta         Float
  utilidad              Float
  
  movimientoContable    MovimientoContable        @relation(fields: [movimientoContableId], references: [id], onDelete: Cascade)
  movimientoContableId  String
  
  producto              Producto                  @relation("ProductoDetallesContables", fields: [productoId], references: [id])
  productoId            String
  
  createdAt             DateTime                  @default(now())

  @@index([productoId])
  @@map("detalles_ingreso_contable")
}
